{"version":3,"sources":["components/home.js","components/progress.js","components/panelThumbnail.js","components/step1.js","components/preview.js","components/step2.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","props","state","className","onClick","e","changeStep","PanelThumbnail","getImageSrc","style","backgroundImage","this","src","Step1","bgs","step","map","bg","key","Preview","id","bgSrc","fontSize","size","color","text","Step2","handleChange","setState","download","domtoimage","toPng","document","querySelector","then","dataUrl","saveAs","catch","error","console","newText","htmlFor","value","type","onChange","target","name","imgSrc","Main","stepNbr","persist","progressWidth","Fragment","width","srcSet","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2OAuBeA,GCrBQC,Y,kDDCrB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAIT,IAAD,OACP,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,kBAAb,cACA,wBAAIA,UAAU,eAAd,WACA,uBAAGA,UAAU,cAAb,4EAGA,4BAAQA,UAAU,YAAYC,QAAS,SAACC,GAAD,OAAO,EAAKJ,MAAMK,WAAW,KAApE,wB,GAbWN,cEsBJO,E,kDArBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,qDAMT,IAAD,OACP,OACE,yBAAKC,UAAU,YACb,yBACEC,QAAS,SAACC,GAAD,OAAO,EAAKJ,MAAMO,YAAYH,IACvCF,UAAU,YACVM,MAAO,CACLC,gBAAiB,iBAAmBC,KAAKV,MAAMW,IAAM,gB,GAdpCZ,aCkCda,E,kDAhCb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXY,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAHN,E,qDAMT,IAAD,OACP,OACE,yBAAKX,UAAU,SACb,4BACEA,UAAU,aACVC,QAAS,SAACC,GAAD,OAAO,EAAKJ,MAAMK,WAAW,EAAKL,MAAMc,KAAO,KAF1D,WAMA,wBAAIZ,UAAU,eAAd,2BACA,yBAAKA,UAAU,OACZQ,KAAKT,MAAMY,IAAIE,KAAI,SAACC,GACnB,OACE,kBAAC,EAAD,CACET,YAAa,EAAKP,MAAMO,YACxBU,IAAKD,EACLL,IAAK,KAAOK,a,GAvBRjB,a,OC+BLmB,E,kDA/Bb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,yBAAKC,UAAU,WACb,uCACA,yBACEiB,GAAG,UACHjB,UAAU,qBACVM,MAAO,CACLC,gBAAiBC,KAAKV,MAAMoB,QAG9B,uBACElB,UAAU,gBACVM,MAAO,CACLa,SAAUX,KAAKV,MAAMsB,KAAO,KAC5BC,MAAOb,KAAKV,MAAMuB,QAGnBb,KAAKV,MAAMwB,Y,GAxBFzB,a,uBC8GP0B,E,kDA1Gb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAQR0B,aAAe,SAACtB,EAAGa,GACjB,EAAKU,SAAL,eACGV,EAAMb,KAXQ,EAenBwB,SAAW,WACIC,IACVC,MAAMC,SAASC,cAAc,aAC7BC,MAAK,SAAUC,GACdC,iBAAOD,EAAS,iBAEjBE,OAAM,SAAUC,GACfC,QAAQD,MAAM,8BAA+BA,OAtBhC,EA0BnBE,QAAU,WACR,EAAKZ,SAAS,CACZH,KAAM,MA1BR,EAAKvB,MAAQ,CACXuB,KAAM,GACNF,KAAM,GACNC,MAAO,QALQ,E,qDAgCT,IAAD,OACP,OACE,yBAAKrB,UAAU,SACb,4BACEA,UAAU,aACVC,QAAS,SAACC,GAAD,OAAO,EAAKJ,MAAMK,WAAW,EAAKL,MAAMc,KAAO,KAF1D,WAMA,wBAAIZ,UAAU,eAAd,0BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,2BAAOsC,QAAQ,IAAf,wBACA,2BACEC,MAAO/B,KAAKT,MAAMuB,KAClBtB,UAAU,oBACVwC,KAAK,OACLC,SAAU,SAACvC,GAAD,OAAO,EAAKsB,aAAatB,EAAEwC,OAAOH,MAAO,WAErD,4BACA,yBAAKvC,UAAU,mBACb,2BAAOsC,QAAQ,IAAf,aACA,4BACEtC,UAAU,4BACVwC,KAAK,QACLG,KAAK,GACL1B,GAAG,GACHwB,SAAU,SAACvC,GAAD,OAAO,EAAKsB,aAAatB,EAAEwC,OAAOH,MAAO,UAEnD,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,OAEF,2BAAOD,QAAQ,IAAf,cACA,2BACEtC,UAAU,4BACVwC,KAAK,QACLG,KAAK,GACL1B,GAAG,GACHwB,SAAU,SAACvC,GAAD,OAAO,EAAKsB,aAAatB,EAAEwC,OAAOH,MAAO,cAOzD,yBAAKvC,UAAU,YACb,kBAAC,EAAD,CACEsB,KAAMd,KAAKT,MAAMuB,KACjBF,KAAMZ,KAAKT,MAAMqB,KACjBF,MAAOV,KAAKV,MAAM8C,OAClBvB,MAAOb,KAAKT,MAAMsB,QAEpB,yBAAKrB,UAAU,yBACb,4BAAQA,UAAU,YAAYC,QAASO,KAAKkB,UAA5C,YAGA,4BAAQ1B,UAAU,YAAYC,QAASO,KAAK6B,SAA5C,oB,GAhGMxC,aC2DLgD,E,kDA1Db,WAAY/C,GAAQ,IAAD,8BACjB,cAAMA,IAORK,WAAa,SAAC2C,GACZ,EAAKrB,SAAS,CAAEb,KAAMkC,KATL,EAYnBzC,YAAc,SAACI,GACbA,EAAIsC,UACJ,EAAKtB,SAAS,CACZP,MAAOT,EAAIiC,OAAOpC,MAAMC,kBAE1B,EAAKJ,WAAW,IAfhB,EAAKJ,MAAQ,CACXa,KAAM,EACNoC,cAAe,IAJA,E,qDAqBjB,OACE,kBAAC,IAAMC,SAAP,KACE,gCACE,yBACEC,MAAM,KACNzC,IAAI,iBACJ0C,OAAO,iBACPC,IAAI,OACJpD,UAAU,UASO,IAApBQ,KAAKT,MAAMa,MAAc,kBAAC,EAAD,CAAMT,WAAYK,KAAKL,aAC5B,IAApBK,KAAKT,MAAMa,MACV,kBAAC,EAAD,CACEA,KAAMJ,KAAKT,MAAMa,KACjBP,YAAaG,KAAKH,YAClBF,WAAYK,KAAKL,aAGA,IAApBK,KAAKT,MAAMa,MACV,kBAAC,EAAD,CACEA,KAAMJ,KAAKT,MAAMa,KACjBgC,OAAQpC,KAAKT,MAAMmB,MACnBf,WAAYK,KAAKL,kB,GAnDVN,aCMJwD,MARf,WACE,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,QCMcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASiC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiC,c","file":"static/js/main.aaed1f39.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <p className=\"home__surtitle\">Welcome to</p>\r\n        <h1 className=\"home__title\">Pannelo</h1>\r\n        <p className=\"home__desc\">\r\n          Pannelo letâ€™s you create a twitch panel with predefined backgrounds\r\n        </p>\r\n        <button className=\"home__btn\" onClick={(e) => this.props.changeStep(1)}>\r\n          Create my panel\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Progress extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"progress-container\">\r\n          <div className=\"progress__bar\">\r\n            <div\r\n              className=\"progress__bar-in\"\r\n              style={{ width: this.props.progressWidth + \"%\" }}\r\n            ></div>\r\n          </div>\r\n          <div className=\"progress__indicator-container --step1\">\r\n            <div className=\"progress__indicator\"></div>\r\n            <p>Step 1: Picture</p>\r\n          </div>\r\n          <div className=\"progress__indicator-container --step2\">\r\n            <div className=\"progress__indicator\"></div>\r\n            <p>Step 2: Text</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Progress;\r\n","import React, { Component } from \"react\";\r\n\r\nclass PanelThumbnail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-lg-6\">\r\n        <div\r\n          onClick={(e) => this.props.getImageSrc(e)}\r\n          className=\"thumbnail\"\r\n          style={{\r\n            backgroundImage: \"url(./img/bgs/\" + this.props.src + \".png)\",\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PanelThumbnail;\r\n","import React, { Component } from \"react\";\r\nimport PanelThumbnail from \"./panelThumbnail\";\r\n\r\nclass Step1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bgs: [1, 2, 3, 4, 5, 6],\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"step1\">\r\n        <button\r\n          className=\"step__back\"\r\n          onClick={(e) => this.props.changeStep(this.props.step - 1)}\r\n        >\r\n          Go back\r\n        </button>\r\n        <h1 className=\"step__title\">Please choose a picture</h1>\r\n        <div className=\"row\">\r\n          {this.state.bgs.map((bg) => {\r\n            return (\r\n              <PanelThumbnail\r\n                getImageSrc={this.props.getImageSrc}\r\n                key={bg}\r\n                src={\"bg\" + bg}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Step1;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Preview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"preview\">\r\n        <h2>Preview</h2>\r\n        <div\r\n          id=\"capture\"\r\n          className=\"preview__thumbnail\"\r\n          style={{\r\n            backgroundImage: this.props.bgSrc,\r\n          }}\r\n        >\r\n          <p\r\n            className=\"preview__text\"\r\n            style={{\r\n              fontSize: this.props.size + \"px\",\r\n              color: this.props.color,\r\n            }}\r\n          >\r\n            {this.props.text}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from \"react\";\r\nimport Preview from \"./preview\";\r\nimport domtoimage from \"dom-to-image\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nclass Step2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\",\r\n      size: 20,\r\n      color: \"#fff\",\r\n    };\r\n  }\r\n\r\n  handleChange = (e, key) => {\r\n    this.setState({\r\n      [key]: e,\r\n    });\r\n  };\r\n\r\n  download = () => {\r\n    let imgDom = domtoimage\r\n      .toPng(document.querySelector(\"#capture\"))\r\n      .then(function (dataUrl) {\r\n        saveAs(dataUrl, \"banner.jpg\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"oops, something went wrong!\", error);\r\n      });\r\n  };\r\n\r\n  newText = () => {\r\n    this.setState({\r\n      text: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"step2\">\r\n        <button\r\n          className=\"step__back\"\r\n          onClick={(e) => this.props.changeStep(this.props.step - 1)}\r\n        >\r\n          Go back\r\n        </button>\r\n        <h1 className=\"step__title\">Enter your custom text</h1>\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-6\">\r\n            <label htmlFor=\"\">Enter your text here</label>\r\n            <input\r\n              value={this.state.text}\r\n              className=\"step2__text-input\"\r\n              type=\"text\"\r\n              onChange={(e) => this.handleChange(e.target.value, \"text\")}\r\n            />\r\n            <p></p>\r\n            <div className=\"step2__controls\">\r\n              <label htmlFor=\"\">Font size</label>\r\n              <select\r\n                className=\"form-control step2__input\"\r\n                type=\"range\"\r\n                name=\"\"\r\n                id=\"\"\r\n                onChange={(e) => this.handleChange(e.target.value, \"size\")}\r\n              >\r\n                <option value=\"20\">20</option>\r\n                <option value=\"22\">22</option>\r\n                <option value=\"24\">24</option>\r\n                <option value=\"26\">26</option>\r\n                <option value=\"28\">28</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"32\">32</option>\r\n                <option value=\"34\">34</option>\r\n                <option value=\"36\">36</option>\r\n              </select>\r\n              <label htmlFor=\"\">Font Color</label>\r\n              <input\r\n                className=\"form-control step2__input\"\r\n                type=\"color\"\r\n                name=\"\"\r\n                id=\"\"\r\n                onChange={(e) => this.handleChange(e.target.value, \"color\")}\r\n              />\r\n            </div>\r\n\r\n            {/* <label htmlFor=\"\">Border size</label>\r\n            <input type=\"range\" name=\"\" id=\"\" /> */}\r\n          </div>\r\n          <div className=\"col-lg-6\">\r\n            <Preview\r\n              text={this.state.text}\r\n              size={this.state.size}\r\n              bgSrc={this.props.imgSrc}\r\n              color={this.state.color}\r\n            />\r\n            <div className=\"step2__bottom-control\">\r\n              <button className=\"step2__dl\" onClick={this.download}>\r\n                Download\r\n              </button>\r\n              <button className=\"step2__dl\" onClick={this.newText}>\r\n                New text\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Step2;\r\n","import React, { Component } from \"react\";\r\nimport Progress from \"./progress\";\r\nimport Home from \"./home\";\r\nimport Step1 from \"./step1\";\r\nimport Step2 from \"./step2\";\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      step: 0,\r\n      progressWidth: 25,\r\n    };\r\n  }\r\n\r\n  changeStep = (stepNbr) => {\r\n    this.setState({ step: stepNbr });\r\n  };\r\n\r\n  getImageSrc = (src) => {\r\n    src.persist();\r\n    this.setState({\r\n      bgSrc: src.target.style.backgroundImage,\r\n    });\r\n    this.changeStep(2);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <img\r\n            width=\"60\"\r\n            src=\"./img/logo.png\"\r\n            srcSet=\"./img/logo.svg\"\r\n            alt=\"logo\"\r\n            className=\"logo\"\r\n          ></img>\r\n        </header>\r\n        {/* {this.state.step >= 1 && (\r\n          <Progress\r\n            progressWidth={this.state.progressWidth}\r\n            step={this.state.step}\r\n          />\r\n        )} */}\r\n        {this.state.step === 0 && <Home changeStep={this.changeStep} />}\r\n        {this.state.step === 1 && (\r\n          <Step1\r\n            step={this.state.step}\r\n            getImageSrc={this.getImageSrc}\r\n            changeStep={this.changeStep}\r\n          />\r\n        )}\r\n        {this.state.step === 2 && (\r\n          <Step2\r\n            step={this.state.step}\r\n            imgSrc={this.state.bgSrc}\r\n            changeStep={this.changeStep}\r\n          />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Main from \"./components/main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}